[
  {
    "title": "Your First C Program",
    "instructions": "Write a C program that prints 'Hello, World!' to the console using printf.",
    "hint": "#include <stdio.h>\nint main() { printf(\"Hello, World!\\n\"); return 0; }"
  },
  {
    "title": "Variables and Basic Data Types",
    "instructions": "Declare an integer variable age and a float variable height. Assign values and print them.",
    "hint": "int age = 20; float height = 5.9; printf(\"%d %f\\n\", age, height);"
  },
  {
    "title": "Input and Type Conversion",
    "instructions": "Write a program that reads an integer from the user and prints its double.",
    "hint": "int n; scanf(\"%d\", &n); printf(\"%d\\n\", n*2);"
  },
  {
    "title": "If-Else Statements",
    "instructions": "Check if a number is positive, negative, or zero and print the result.",
    "hint": "int n = 15; if (n > 0) printf(\"Positive\\n\"); else if (n < 0) printf(\"Negative\\n\"); else printf(\"Zero\\n\");"
  },
  {
    "title": "For Loops",
    "instructions": "Print numbers from 1 to 5 using a for loop.",
    "hint": "for(int i=1;i<=5;i++) printf(\"%d\\n\", i);"
  },
  {
    "title": "While Loops",
    "instructions": "Print numbers from 5 down to 1 using a while loop.",
    "hint": "int i=5; while(i>=1) { printf(\"%d\\n\", i); i--; }"
  },
  {
    "title": "Arrays",
    "instructions": "Declare an array of 5 integers and print all elements.",
    "hint": "int arr[5] = {1,2,3,4,5}; for(int i=0;i<5;i++) printf(\"%d \", arr[i]);"
  },
  {
    "title": "Functions in C",
    "instructions": "Write a function that takes two integers and returns their sum.",
    "hint": "int add(int a, int b) { return a + b; }"
  },
  {
    "title": "Pointers Basics",
    "instructions": "Declare an integer variable and a pointer to it. Print the value using the pointer.",
    "hint": "int x = 10; int *p = &x; printf(\"%d\", *p);"
  },
  {
    "title": "String Handling",
    "instructions": "Read a string from the user and print its length.",
    "hint": "#include <string.h>\nchar s[100]; scanf(\"%s\", s); printf(\"%d\", strlen(s));"
  },
  {
    "title": "Structures in C",
    "instructions": "Define a struct Person with name and age. Create a variable and print its fields.",
    "hint": "struct Person { char name[50]; int age; }; struct Person p = {\"Alice\", 25}; printf(\"%s %d\", p.name, p.age);"
  },
  {
    "title": "File I/O Basics",
    "instructions": "Write a program that writes 'Hello, File!' to a file called hello.txt.",
    "hint": "#include <stdio.h>\nFILE *f = fopen(\"hello.txt\", \"w\"); fprintf(f, \"Hello, File!\"); fclose(f);"
  },
  {
    "title": "Dynamic Memory Allocation",
    "instructions": "Allocate memory for an array of 5 integers using malloc, assign values, and print them.",
    "hint": "#include <stdlib.h>\nint *arr = (int*)malloc(5*sizeof(int)); for(int i=0;i<5;i++) arr[i]=i; for(int i=0;i<5;i++) printf(\"%d \", arr[i]); free(arr);"
  },
  {
    "title": "Recursion in C",
    "instructions": "Write a recursive function to calculate factorial of a number.",
    "hint": "int fact(int n) { return n<=1 ? 1 : n*fact(n-1); }"
  },
  {
    "title": "Command Line Arguments",
    "instructions": "Write a program that prints all command line arguments.",
    "hint": "int main(int argc, char *argv[]) { for(int i=0;i<argc;i++) printf(\"%s\\n\", argv[i]); return 0; }"
  },
  {
    "title": "2D Arrays",
    "instructions": "Declare a 2D array (3x3) and print its elements.",
    "hint": "int arr[3][3] = {{1,2,3},{4,5,6},{7,8,9}}; for(int i=0;i<3;i++) for(int j=0;j<3;j++) printf(\"%d \", arr[i][j]);"
  },
  {
    "title": "Sorting an Array",
    "instructions": "Write a function to sort an array of integers using bubble sort.",
    "hint": "void bubbleSort(int arr[], int n) { for(int i=0;i<n-1;i++) for(int j=0;j<n-i-1;j++) if(arr[j]>arr[j+1]) { int temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } }"
  },
  {
    "title": "Linked List Basics",
    "instructions": "Define a singly linked list node and write a function to insert at the beginning.",
    "hint": "struct Node { int data; struct Node* next; }; struct Node* insertAtBeginning(struct Node* head, int data) { struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->data = data; newNode->next = head; return newNode; }"
  },
  {
    "title": "Enumerations in C",
    "instructions": "Define an enum for days of the week and print a value.",
    "hint": "enum Day {SUN, MON, TUE, WED, THU, FRI, SAT}; enum Day d = WED; printf(\"%d\", d);"
  },
  {
    "title": "Preprocessor Directives",
    "instructions": "Use #define to create a macro for PI and print its value.",
    "hint": "#define PI 3.14\nprintf(\"%f\", PI);"
  },
  {
    "title": "Function Pointers",
    "instructions": "Create a function pointer and use it to call different functions.",
    "hint": "int add(int a, int b) { return a + b; } int multiply(int a, int b) { return a * b; } int (*operation)(int, int) = add; printf(\"%d\", operation(5, 3)); operation = multiply; printf(\"%d\", operation(5, 3));"
  },
  {
    "title": "Variadic Functions",
    "instructions": "Create a variadic function that can sum variable number of integers.",
    "hint": "#include <stdarg.h>\nint sum(int count, ...) { va_list args; va_start(args, count); int total = 0; for(int i = 0; i < count; i++) total += va_arg(args, int); va_end(args); return total; }"
  },
  {
    "title": "Bit Manipulation",
    "instructions": "Use bitwise operators to perform operations on integers.",
    "hint": "int a = 5, b = 3; printf(\"AND: %d\\n\", a & b); printf(\"OR: %d\\n\", a | b); printf(\"XOR: %d\\n\", a ^ b); printf(\"Left shift: %d\\n\", a << 1); printf(\"Right shift: %d\\n\", a >> 1);"
  },
  {
    "title": "Union and Bit Fields",
    "instructions": "Create a union to store different data types and use bit fields for memory efficiency.",
    "hint": "union Data { int i; float f; char str[20]; }; union Data data; data.i = 10; printf(\"Integer: %d\\n\", data.i); data.f = 3.14; printf(\"Float: %f\\n\", data.f);"
  },
  {
    "title": "Error Handling",
    "instructions": "Use errno and perror to handle errors in C programs.",
    "hint": "#include <errno.h>\nFILE *file = fopen(\"nonexistent.txt\", \"r\"); if(file == NULL) { perror(\"Error opening file\"); printf(\"errno: %d\\n\", errno); }"
  },
  {
    "title": "Signal Handling",
    "instructions": "Use signal() to handle system signals like SIGINT.",
    "hint": "#include <signal.h>\nvoid signalHandler(int sig) { printf(\"\\nSignal %d received\\n\", sig); exit(1); } signal(SIGINT, signalHandler); while(1) { printf(\"Running...\\n\"); sleep(1); }"
  },
  {
    "title": "Time and Date Functions",
    "instructions": "Use time() and localtime() to get current time and date.",
    "hint": "#include <time.h>\ntime_t now; time(&now); struct tm *local = localtime(&now); printf(\"Current time: %02d:%02d:%02d\\n\", local->tm_hour, local->tm_min, local->tm_sec);"
  },
  {
    "title": "Random Number Generation",
    "instructions": "Use rand() and srand() for random number generation.",
    "hint": "#include <stdlib.h>\n#include <time.h>\nsrand(time(NULL)); for(int i = 0; i < 5; i++) printf(\"%d \", rand() % 100); printf(\"\\n\");"
  },
  {
    "title": "String Functions",
    "instructions": "Use string functions like strcpy, strcat, strcmp, and strtok.",
    "hint": "#include <string.h>\nchar str1[50] = \"Hello\"; char str2[50] = \"World\"; strcat(str1, \" \"); strcat(str1, str2); printf(\"%s\\n\", str1); printf(\"Length: %lu\\n\", strlen(str1));"
  },
  {
    "title": "Searching Algorithms",
    "instructions": "Implement linear search and binary search algorithms.",
    "hint": "int linearSearch(int arr[], int n, int target) { for(int i = 0; i < n; i++) if(arr[i] == target) return i; return -1; } int binarySearch(int arr[], int n, int target) { int left = 0, right = n - 1; while(left <= right) { int mid = left + (right - left) / 2; if(arr[mid] == target) return mid; if(arr[mid] < target) left = mid + 1; else right = mid - 1; } return -1; }"
  },
  {
    "title": "Stack Implementation",
    "instructions": "Implement a stack data structure using arrays.",
    "hint": "#define MAX_SIZE 100\nstruct Stack { int data[MAX_SIZE]; int top; }; void push(struct Stack *s, int value) { if(s->top < MAX_SIZE - 1) s->data[++s->top] = value; } int pop(struct Stack *s) { if(s->top >= 0) return s->data[s->top--]; return -1; }"
  },
  {
    "title": "Queue Implementation",
    "instructions": "Implement a queue data structure using arrays.",
    "hint": "#define MAX_SIZE 100\nstruct Queue { int data[MAX_SIZE]; int front, rear; }; void enqueue(struct Queue *q, int value) { if((q->rear + 1) % MAX_SIZE != q->front) { q->data[q->rear] = value; q->rear = (q->rear + 1) % MAX_SIZE; } } int dequeue(struct Queue *q) { if(q->front != q->rear) { int value = q->data[q->front]; q->front = (q->front + 1) % MAX_SIZE; return value; } return -1; }"
  },
  {
    "title": "Binary Tree Implementation",
    "instructions": "Create a binary tree structure and implement traversal functions.",
    "hint": "struct TreeNode { int data; struct TreeNode *left, *right; }; struct TreeNode* createNode(int data) { struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode)); newNode->data = data; newNode->left = newNode->right = NULL; return newNode; } void inorderTraversal(struct TreeNode *root) { if(root != NULL) { inorderTraversal(root->left); printf('%d ', root->data); inorderTraversal(root->right); } }"
  },
  {
    "title": "Hash Table Implementation",
    "instructions": "Implement a simple hash table with chaining for collision resolution.",
    "hint": "#define TABLE_SIZE 100\nstruct HashNode { int key, value; struct HashNode *next; }; struct HashTable { struct HashNode *table[TABLE_SIZE]; }; int hash(int key) { return key % TABLE_SIZE; } void insert(struct HashTable *ht, int key, int value) { int index = hash(key); struct HashNode *newNode = (struct HashNode*)malloc(sizeof(struct HashNode)); newNode->key = key; newNode->value = value; newNode->next = ht->table[index]; ht->table[index] = newNode; }"
  },
  {
    "title": "Memory Management",
    "instructions": "Demonstrate proper memory management and avoid memory leaks.",
    "hint": "int *ptr = (int*)malloc(sizeof(int)); if(ptr != NULL) { *ptr = 42; printf('%d\\n', *ptr); free(ptr); ptr = NULL; }"
  },
  {
    "title": "File Operations",
    "instructions": "Read from and write to files using different modes.",
    "hint": "FILE *file = fopen('data.txt', 'w'); if(file != NULL) { fprintf(file, 'Hello File!\\n'); fclose(file); } file = fopen('data.txt', 'r'); if(file != NULL) { char buffer[100]; fgets(buffer, sizeof(buffer), file); printf('%s', buffer); fclose(file); }"
  },
  {
    "title": "Binary File I/O",
    "instructions": "Write and read binary data using fwrite() and fread().",
    "hint": "struct Person { char name[50]; int age; }; struct Person people[] = {{'Alice', 25}, {'Bob', 30}}; FILE *file = fopen('people.dat', 'wb'); fwrite(people, sizeof(struct Person), 2, file); fclose(file); file = fopen('people.dat', 'rb'); struct Person readPeople[2]; fread(readPeople, sizeof(struct Person), 2, file); fclose(file);"
  },
  {
    "title": "Command Line Parsing",
    "instructions": "Parse command line arguments and handle different options.",
    "hint": "int main(int argc, char *argv[]) { for(int i = 1; i < argc; i++) { if(argv[i][0] == '-') { printf('Option: %s\\n', argv[i]); } else { printf('Argument: %s\\n', argv[i]); } } return 0; }"
  },
  {
    "title": "Environment Variables",
    "instructions": "Access and use environment variables in C programs.",
    "hint": "#include <stdlib.h>\nchar *path = getenv('PATH'); if(path != NULL) printf('PATH: %s\\n', path); char *home = getenv('HOME'); if(home != NULL) printf('HOME: %s\\n', home);"
  },
  {
    "title": "Process Control",
    "instructions": "Use fork(), exec(), and wait() for process control.",
    "hint": "#include <unistd.h>\n#include <sys/wait.h>\npid_t pid = fork(); if(pid == 0) { printf('Child process\\n'); execl('/bin/ls', 'ls', '-la', NULL); } else if(pid > 0) { wait(NULL); printf('Parent process\\n'); }"
  },
  {
    "title": "Inter-process Communication",
    "instructions": "Use pipes for communication between parent and child processes.",
    "hint": "#include <unistd.h>\nint pipefd[2]; pipe(pipefd); pid_t pid = fork(); if(pid == 0) { close(pipefd[0]); write(pipefd[1], 'Hello from child', 16); close(pipefd[1]); } else { close(pipefd[1]); char buffer[100]; read(pipefd[0], buffer, 100); printf('Received: %s\\n', buffer); close(pipefd[0]); }"
  },
  {
    "title": "Shared Memory",
    "instructions": "Use shared memory for communication between processes.",
    "hint": "#include <sys/ipc.h>\n#include <sys/shm.h>\nkey_t key = ftok('shmfile', 65); int shmid = shmget(key, 1024, 0666|IPC_CREAT); char *str = (char*)shmat(shmid, (void*)0, 0); strcpy(str, 'Hello Shared Memory'); shmdt(str); shmctl(shmid, IPC_RMID, NULL);"
  },
  {
    "title": "Message Queues",
    "instructions": "Use message queues for inter-process communication.",
    "hint": "#include <sys/ipc.h>\n#include <sys/msg.h>\nstruct message { long msg_type; char msg_text[100]; }; key_t key = ftok('msgfile', 65); int msgid = msgget(key, 0666|IPC_CREAT); struct message msg; msg.msg_type = 1; strcpy(msg.msg_text, 'Hello Message Queue'); msgsnd(msgid, &msg, sizeof(msg), 0);"
  },
  {
    "title": "Socket Programming",
    "instructions": "Create a simple TCP server and client.",
    "hint": "#include <sys/socket.h>\n#include <netinet/in.h>\nint server_fd = socket(AF_INET, SOCK_STREAM, 0); struct sockaddr_in address; address.sin_family = AF_INET; address.sin_addr.s_addr = INADDR_ANY; address.sin_port = htons(8080); bind(server_fd, (struct sockaddr*)&address, sizeof(address)); listen(server_fd, 3);"
  },
  {
    "title": "Threading with POSIX Threads",
    "instructions": "Create threads using pthread library.",
    "hint": "#include <pthread.h>\n#include <unistd.h>\nvoid* threadFunction(void* arg) { printf('Thread %d executing\\n', *(int*)arg); return NULL; } pthread_t thread1, thread2; int id1 = 1, id2 = 2; pthread_create(&thread1, NULL, threadFunction, &id1); pthread_create(&thread2, NULL, threadFunction, &id2); pthread_join(thread1, NULL); pthread_join(thread2, NULL);"
  },
  {
    "title": "Mutex and Synchronization",
    "instructions": "Use mutex for thread synchronization.",
    "hint": "#include <pthread.h>\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; int shared_data = 0; void* increment(void* arg) { pthread_mutex_lock(&mutex); shared_data++; pthread_mutex_unlock(&mutex); return NULL; }"
  },
  {
    "title": "Condition Variables",
    "instructions": "Use condition variables for thread communication.",
    "hint": "#include <pthread.h>\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; pthread_cond_t cond = PTHREAD_COND_INITIALIZER; bool ready = false; void* waiter(void* arg) { pthread_mutex_lock(&mutex); while(!ready) pthread_cond_wait(&cond, &mutex); pthread_mutex_unlock(&mutex); return NULL; }"
  },
  {
    "title": "Regular Expressions",
    "instructions": "Use regex library for pattern matching.",
    "hint": "#include <regex.h>\nregex_t regex; int reti = regcomp(&regex, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$', REG_EXTENDED); if(reti) { fprintf(stderr, 'Could not compile regex\\n'); exit(1); } reti = regexec(&regex, 'test@email.com', 0, NULL, 0); if(!reti) printf('Match\\n'); else if(reti == REG_NOMATCH) printf('No match\\n'); regfree(&regex);"
  },
  {
    "title": "Database Integration",
    "instructions": "Connect to SQLite database using C API.",
    "hint": "#include <sqlite3.h>\nsqlite3 *db; int rc = sqlite3_open('test.db', &db); if(rc) { fprintf(stderr, 'Can't open database: %s\\n', sqlite3_errmsg(db)); } else { char *sql = 'CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT);'; sqlite3_exec(db, sql, 0, 0, 0); } sqlite3_close(db);"
  },
  {
    "title": "Unit Testing",
    "instructions": "Write simple unit tests for C functions.",
    "hint": "void testAddition() { int result = add(2, 3); if(result == 5) printf('Test passed\\n'); else printf('Test failed\\n'); } void testMultiplication() { int result = multiply(2, 3); if(result == 6) printf('Test passed\\n'); else printf('Test failed\\n'); } int main() { testAddition(); testMultiplication(); return 0; }"
  },
  {
    "title": "Logging and Debugging",
    "instructions": "Implement simple logging and debugging macros.",
    "hint": "#define DEBUG 1\n#define LOG(msg) if(DEBUG) printf('[DEBUG] %s\\n', msg)\n#define ASSERT(condition, msg) if(!(condition)) { printf('ASSERTION FAILED: %s\\n', msg); exit(1); }\nLOG('Starting program'); ASSERT(1 == 1, 'Basic assertion');"
  },
  {
    "title": "Performance Profiling",
    "instructions": "Use clock() to measure execution time.",
    "hint": "#include <time.h>\nclock_t start = clock(); // ... code to measure ... clock_t end = clock(); double time_spent = (double)(end - start) / CLOCKS_PER_SEC; printf('Time spent: %f seconds\\n', time_spent);"
  },
  {
    "title": "Security Best Practices",
    "instructions": "Implement security measures including input validation and buffer overflow prevention.",
    "hint": "// Use strncpy instead of strcpy\nchar dest[10]; strncpy(dest, 'Hello World', sizeof(dest) - 1); dest[sizeof(dest) - 1] = '\\0';\n// Validate all input\nif(strlen(input) < MAX_SIZE) { // process input }\n// Use secure random numbers\n// Avoid format string vulnerabilities\nprintf('%s', user_input); // not printf(user_input);"
  },
  {
    "title": "Portable Code",
    "instructions": "Write portable C code that works across different platforms.",
    "hint": "// Use standard C library functions\n// Avoid platform-specific code\n// Use conditional compilation\n#ifdef _WIN32\n// Windows-specific code\n#elif defined(__linux__)\n// Linux-specific code\n#endif\n// Use standard data types\n#include <stdint.h>\nuint32_t portable_int = 42;\n// Handle endianness\nuint32_t swap_endian(uint32_t value) {\nreturn ((value & 0xFF) << 24) |\n((value & 0xFF00) << 8) |\n((value & 0xFF0000) >> 8) |\n((value & 0xFF000000) >> 24);\n}"
  },
  {
    "title": "Advanced C Features and Best Practices",
    "instructions": "Implement advanced C features and follow best practices for professional C development.",
    "hint": "// Use const correctness\nconst char *str = 'immutable string';\n// Use restrict keyword for optimization\nvoid copy_array(int *restrict dest, const int *restrict src, int n);\n// Use compound literals\nstruct Point p = (struct Point){.x = 10, .y = 20};\n// Use designated initializers\nint arr[5] = {[0] = 1, [2] = 3, [4] = 5};\n// Use static for internal linkage\nstatic int internal_function(void) { return 42; }\n// Use inline functions\ninline int square(int x) { return x * x; }"
  }
] 